{"version":3,"sources":["App.tsx","serviceWorker.ts","index.tsx"],"names":["socket","App","props","state","endpoint","options","value","this","io","emit","session","username","Date","now","on","users","setState","console","log","className","map","opt","key","type","name","onChange","handleVote","length","user","index","id","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mOAqBIA,E,kGA+GWC,G,kBA5Gb,WAAYC,GAAgB,IAAD,8BACzB,4CAAMA,KAEDC,MAAQ,CACXC,SAAU,IACVC,QAAS,CACP,CAAEC,MAAO,GACT,CAAEA,MAAO,GACT,CAAEA,MAAO,GACT,CAAEA,MAAO,GACT,CAAEA,MAAO,GACT,CAAEA,MAAO,MAXY,E,iFAgBN,IAAD,OAEVF,EAAaG,KAAKJ,MAAlBC,UACRJ,EAASQ,IAAGJ,IAELK,KAAK,OAAQ,CAAEC,QAAS,QAASC,SAAUC,KAAKC,QAEvDb,EAAOc,GAAG,eAAe,SAACC,GACxB,EAAKC,SAAS,CAAED,e,6CAKlBf,EAAOS,KAAK,QAAS,CAAEC,QAAS,Y,iCAGvBJ,GACTW,QAAQC,IAAIZ,K,+BAGJ,IAAD,SACoBC,KAAKJ,MAAxBY,EADD,EACCA,MAAOV,EADR,EACQA,QAEf,OACE,yBAAKc,UAAU,OACb,yBAAKA,UAAU,oBACb,yBAAKA,UAAU,mBACb,yBAAKA,UAAU,WACb,mCAEF,0BAAMA,UAAU,WACd,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,uBACb,yBAAKA,UAAU,YAAf,QACA,yBAAKA,UAAU,SACZd,GACCA,EAAQe,KAAI,SAAAC,GAAG,OACb,2BAAOC,IAAKD,EAAIf,MAAOa,UAAU,gBAC/B,2BACEI,KAAK,QACLC,KAAK,WACLC,SAAU,kBAAM,EAAKC,WAAWL,EAAIf,UAErCe,EAAIf,YAMf,yBAAKa,UAAU,uBACb,yBAAKA,UAAU,YAAf,WACA,yBAAKA,UAAU,YAIrB,+BAEE,yBAAKA,UAAU,kBACb,yBAAKA,UAAU,SACb,yBAAKA,UAAU,cACb,0BAAMA,UAAU,YAAhB,QACA,6BACA,yBAAKA,UAAU,0BACb,0CAKN,yBAAKA,UAAU,SACb,yBAAKA,UAAU,SACb,0BAAMA,UAAU,YAAhB,SACSJ,GAAK,YAASA,EAAMY,OAAf,OAEd,4BACGZ,GACCA,EAAMK,KAAI,SAACQ,EAAMC,GAAP,OACR,wBAAIP,IAAKM,EAAKE,IACXD,EAAQ,EADX,KACe,2BAAID,EAAKjB,0B,GA9FhCoB,cCXEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.542529f2.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport io from \"socket.io-client\";\nimport \"./App.css\";\n\ninterface IUser {\n  id?: string;\n  username?: string;\n  session?: string;\n}\n\ninterface IOption {\n  value?: number;\n}\n\ninterface IProps {}\ninterface IState {\n  endpoint?: any;\n  users?: IUser[];\n  options: IOption[];\n}\n\nlet socket: any;\n\nclass App extends Component<IProps, IState> {\n  constructor(props: IProps) {\n    super(props);\n\n    this.state = {\n      endpoint: \"/\",\n      options: [\n        { value: 1 },\n        { value: 2 },\n        { value: 3 },\n        { value: 5 },\n        { value: 8 },\n        { value: 13 }\n      ]\n    };\n  }\n\n  componentDidMount() {\n    \n    const { endpoint } = this.state;\n    socket = io(endpoint);\n\n    socket.emit(\"join\", { session: \"12345\", username: Date.now() });\n\n    socket.on(\"updateUsers\", (users: IUser[]) => {\n      this.setState({ users });\n    });\n  }\n\n  componentWillUnmount() {\n    socket.emit(\"leave\", { session: \"12345\" });\n  }\n\n  handleVote(value?: number) {\n    console.log(value);\n  }\n\n  render() {\n    const { users, options } = this.state;\n\n    return (\n      <div className=\"App\">\n        <div className=\"global-container\">\n          <div className=\"d-flex flex-row\">\n            <nav className=\"sidebar\">\n              <h1>GM</h1>\n            </nav>\n            <main className=\"content\">\n              <div className=\"content-holder\">\n                <div className=\"panel panel-primary\">\n                  <div className=\"subtitle\">Vote</div>\n                  <div className=\"mt-1 \">\n                    {options &&\n                      options.map(opt => (\n                        <label key={opt.value} className=\"voting-items\">\n                          <input\n                            type=\"radio\"\n                            name=\"optradio\"\n                            onChange={() => this.handleVote(opt.value)}\n                          />\n                          {opt.value}\n                        </label>\n                      ))}\n                  </div>\n                </div>\n\n                <div className=\"panel panel-primary\">\n                  <div className=\"subtitle\">Results</div>\n                  <div className=\"mt-1\"></div>\n                </div>\n              </div>\n            </main>\n            <aside>\n              {/* Timer */}\n              <div className=\"content-holder\">\n                <div className=\"timer\">\n                  <div className=\"panel mb-1\">\n                    <span className=\"subtitle\">Time</span>\n                    <br />\n                    <div className=\"timer-time text-center\">\n                      <span>00:00</span>\n                    </div>\n                  </div>\n                </div>\n                {/*  Users */}\n                <div className=\"users\">\n                  <div className=\"panel\">\n                    <span className=\"subtitle\">\n                      Users {users && `{ ${users.length} }`}\n                    </span>\n                    <ul>\n                      {users &&\n                        users.map((user, index) => (\n                          <li key={user.id}>\n                            {index + 1}. <i>{user.username}</i>\n                          </li>\n                        ))}\n                    </ul>\n                  </div>\n                </div>\n              </div>\n            </aside>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}